/* * This Java source file was generated by the Gradle 'init' task. */
package com.strangegrotto.wealthdraft;

import ch.qos.logback.classic.Level;
import ch.qos.logback.classic.LoggerContext;
import ch.qos.logback.classic.encoder.PatternLayoutEncoder;
import ch.qos.logback.classic.spi.ILoggingEvent;
import ch.qos.logback.core.ConsoleAppender;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.dataformat.yaml.YAMLFactory;
import com.fasterxml.jackson.datatype.guava.GuavaModule;
import com.fasterxml.jackson.datatype.jsr310.JavaTimeModule;
import com.google.common.base.Strings;
import com.google.common.collect.Ordering;
import com.strangegrotto.wealthdraft.errors.ValOrGerr;
import com.strangegrotto.wealthdraft.govconstants.GovConstantsForYear;
import com.strangegrotto.wealthdraft.govconstants.RetirementConstants;
import com.strangegrotto.wealthdraft.networth.historical.Asset;
import com.strangegrotto.wealthdraft.networth.historical.HistNetWorthCalcResults;
import com.strangegrotto.wealthdraft.networth.historical.HistNetWorthCalculator;
import com.strangegrotto.wealthdraft.networth.projections.ProjNetWorthCalcResults;
import com.strangegrotto.wealthdraft.networth.projections.ProjNetWorthCalculator;
import com.strangegrotto.wealthdraft.networth.projections.ProjectionScenario;
import com.strangegrotto.wealthdraft.networth.projections.Projections;
import com.strangegrotto.wealthdraft.scenarios.IncomeStreams;
import com.strangegrotto.wealthdraft.scenarios.TaxScenario;
import com.strangegrotto.wealthdraft.tax.ScenarioTaxCalculator;
import com.strangegrotto.wealthdraft.tax.ScenarioTaxes;
import com.strangegrotto.wealthdraft.tax.Tax;
import com.strangegrotto.wealthdraft.validator.ValidationWarning;
import net.sourceforge.argparse4j.ArgumentParsers;
import net.sourceforge.argparse4j.helper.HelpScreenException;
import net.sourceforge.argparse4j.impl.Arguments;
import net.sourceforge.argparse4j.inf.ArgumentParser;
import net.sourceforge.argparse4j.inf.ArgumentParserException;
import net.sourceforge.argparse4j.inf.Namespace;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.io.File;
import java.io.IOException;
import java.text.DecimalFormat;
import java.time.LocalDate;
import java.time.Year;
import java.util.*;
import java.util.stream.Collectors;

public class Main {
    private static final int SUCCESS_EXIT_CODE = 0;
    private static final int FAILURE_EXIT_CODE = 1;

    // TODO Rename this to "tax-scenarios"??? The reason to hold off is to combine the "projections"
    //  and "scenarios" files into a single one
    private static final String TAX_SCENARIOS_FILEPATH_ARG = "scenarios";
    private static final String GOV_CONSTANTS_FILEPATH_ARG = "gov-constants";
    private static final String ASSETS_FILEPATH_ARG = "assets";
    private static final String PROJECTIONS_FILEPATH_ARG = "projections";
    private static final String LOG_LEVEL_ARG = "log-level";
    private static final String ALL_SCENARIOS_ARG = "all";

    private static final String LOGBACK_LAYOUT_PATTERN = "%highlight(%-5level) %logger{0} - %message%n";

    private static final int MINIMUM_ITEM_TITLE_WIDTH = 40;
    private static final int MINIMUM_CURRENCY_WIDTH = 10;
    private static final String SUM_LINE = Strings.repeat(" ", MINIMUM_ITEM_TITLE_WIDTH + 2)
            + Strings.repeat("-", MINIMUM_CURRENCY_WIDTH);
    private static final DecimalFormat CURRENCY_FORMAT = new DecimalFormat  ("###,##0");
    private static final DecimalFormat PERCENT_FORMAT = new DecimalFormat("#0.0%");

    private static final String BANNER_HEADER_LINE = Strings.repeat("=", 2 * MINIMUM_ITEM_TITLE_WIDTH + 2);

    // TODO make this configurable
    // The user will be warned that their historical asset records are out-of-date if the latest entry is greater than
    //  this many days ago
    private static final long STALE_ASSET_THRESHOLD_DAYS = 30;

    private static final int PROJECTION_DISPLAY_INCREMENT_YEARS = 5;

    private static final Logger log = LoggerFactory.getLogger(Main.class);

    public static void main(String[] args) {
        Logger slf4jRootLogger = org.slf4j.LoggerFactory.getLogger(ch.qos.logback.classic.Logger.ROOT_LOGGER_NAME);
        ch.qos.logback.classic.Logger logbackRootLogger = (ch.qos.logback.classic.Logger) slf4jRootLogger;
        configureRootLoggerPattern(logbackRootLogger);

        ArgumentParser parser = ArgumentParsers.newFor("Financial Predictor").build()
                .defaultHelp(true)
                .description("A financial modelling CLI");
        parser.addArgument("--" + TAX_SCENARIOS_FILEPATH_ARG)
                .dest(TAX_SCENARIOS_FILEPATH_ARG)
                .required(true)
                .help("YAML file containing scenarios to calculate");
        // TODO rename this; it's only tax-specific
        parser.addArgument("--" + ALL_SCENARIOS_ARG)
                .dest(ALL_SCENARIOS_ARG)
                .type(Boolean.class)
                .setDefault(Boolean.FALSE)
                .action(Arguments.storeTrue())
                .help("If set, renders all scenarios (rather than just the current and future years)");
        parser.addArgument("--" + GOV_CONSTANTS_FILEPATH_ARG)
                .dest(GOV_CONSTANTS_FILEPATH_ARG)
                .required(true)
                .help("YAML file of gov constants per year");
        parser.addArgument("--" + ASSETS_FILEPATH_ARG)
                .dest(ASSETS_FILEPATH_ARG)
                .required(true)
                .help("YAML file of asset values");
        parser.addArgument("--" + PROJECTIONS_FILEPATH_ARG)
                .dest(PROJECTIONS_FILEPATH_ARG)
                .required(true)
                .help("YAML file of future projections");
        parser.addArgument("--" + LOG_LEVEL_ARG)
                .dest(LOG_LEVEL_ARG)
                .type(Level.class)
                .setDefault(Level.INFO)
                .choices(Level.TRACE, Level.DEBUG, Level.INFO, Level.WARN, Level.ERROR)
                .help("Log level to output at");

        Namespace parsedArgs;
        try {
            parsedArgs = parser.parseArgs(args);
        } catch (HelpScreenException e) {
            // For some strange reason, argparse4j throws an exception on help
            System.exit(SUCCESS_EXIT_CODE);
            return;
        } catch (ArgumentParserException e) {
            log.error("An error occurred parsing the CLI args", e);
            System.exit(FAILURE_EXIT_CODE);
            return;
        }

        Level logLevel = parsedArgs.get(LOG_LEVEL_ARG);
        logbackRootLogger.setLevel(logLevel);

        ObjectMapper mapper = new ObjectMapper(new YAMLFactory());
        mapper.registerModule(new GuavaModule());
        mapper.registerModule(new JavaTimeModule());
        TypeFactory typeFactory = mapper.getTypeFactory();

        String taxScenariosFilepath = parsedArgs.getString(TAX_SCENARIOS_FILEPATH_ARG);
        log.debug("Scenarios filepath: {}", taxScenariosFilepath);
        MapType taxScenariosMapType = typeFactory.constructMapType(HashMap.class, String.class, TaxScenario.class);
        Map<String, TaxScenario> taxScenarios;
        try {
            taxScenarios = mapper.readValue(new File(taxScenariosFilepath), taxScenariosMapType);
        } catch (IOException e) {
            log.error("An error occurred parsing tax scenarios file '{}'", taxScenariosFilepath, e);
            System.exit(FAILURE_EXIT_CODE);
            return;
        }

        String govConstantsFilepath = parsedArgs.getString(GOV_CONSTANTS_FILEPATH_ARG);
        log.debug("Gov constants filepath: {}", govConstantsFilepath);
        MapType govConstantsMapType = typeFactory.constructMapType(HashMap.class, Integer.class, GovConstantsForYear.class);
        Map<Integer, GovConstantsForYear> allGovConstants;
        try {
            allGovConstants = mapper.readValue(new File(govConstantsFilepath), govConstantsMapType);
        } catch (IOException e) {
            log.error("An error occurred parsing gov constants file '{}'", govConstantsFilepath, e);
            System.exit(FAILURE_EXIT_CODE);
            return;
        }

        String assetsFilepath = parsedArgs.getString(ASSETS_FILEPATH_ARG);
        log.debug("Assets filepath: {}", assetsFilepath);
        MapType assetsMapType = typeFactory.constructMapType(HashMap.class, String.class, Asset.class);
        Map<String, Asset> assets;
        try {
            assets = mapper.readValue(new File(assetsFilepath), assetsMapType);
        } catch (IOException e) {
            log.error("An error occurred parsing the assets file '{}'", assetsFilepath, e);
            System.exit(FAILURE_EXIT_CODE);
            return;
        }

        String projectionsFilepath = parsedArgs.getString(PROJECTIONS_FILEPATH_ARG);
        log.debug("Projections filepath: {}", assetsFilepath);
        Projections projections;
        try {
            projections = mapper.readValue(new File(projectionsFilepath), Projections.class);
        } catch (IOException e) {
            log.error("An error occurred parsing the projections file '{}'", projectionsFilepath, e);
            System.exit(FAILURE_EXIT_CODE);
            return;
        }

        renderMultipleTaxScenarios(
                parsedArgs.getBoolean(ALL_SCENARIOS_ARG),
                taxScenarios,
                allGovConstants
        );


        renderNetWorthCalculations(assets, projections);
    }

    private static void configureRootLoggerPattern(ch.qos.logback.classic.Logger rootLogger) {
        // Configure the logger with our desired pattern
        // See: http://logback.qos.ch/manual/layouts.html
        LoggerContext loggerContext = rootLogger.getLoggerContext();
        loggerContext.reset();

        PatternLayoutEncoder encoder = new PatternLayoutEncoder();
        encoder.setContext(loggerContext);
        encoder.setPattern(LOGBACK_LAYOUT_PATTERN);
        encoder.start();

        ConsoleAppender<ILoggingEvent> appender = new ConsoleAppender<>();
        appender.setContext(loggerContext);
        appender.setEncoder(encoder);
        appender.start();

        rootLogger.addAppender(appender);
    }

    private static void renderMultipleTaxScenarios(
            boolean doRenderAllScenarios,
            Map<String, TaxScenario> scenarios,
            Map<Integer, GovConstantsForYear> allGovConstants) {
        Integer latestYear = Collections.max(allGovConstants.keySet());
        GovConstantsForYear latestGovConstants = allGovConstants.get(latestYear);
        int currentYear = Year.now().getValue();
        if (currentYear > latestYear) {
            log.warn("The latest gov constants we have are old, from {}!!!", latestYear);
        }

        // Render scenarios
        // TODO break this into a helper function
        int minYearToRender = doRenderAllScenarios ? 0 : Year.now().getValue();
        List<String> scenarioNames = new ArrayList<>(scenarios.keySet());
        scenarioNames.sort(Ordering.natural());
        for (String scenarioName : scenarioNames) {
            TaxScenario scenario = scenarios.get(scenarioName);
            if (scenario.getYear() < minYearToRender) {
                continue;
            }

            log.info("");
            logBannerHeader(scenarioName);

            int scenarioYear = scenario.getYear();
            GovConstantsForYear govConstantsToUse;
            if (scenarioYear > currentYear) {
                log.info(
                        "Scenario wants future year {}; using latest gov constants from {}",
                        scenarioYear,
                        latestYear
                );
                govConstantsToUse = latestGovConstants;
            } else {
                if (!allGovConstants.containsKey(scenarioYear)) {
                    log.error(
                            "Could not calculate scenario; scenario wants year {} but no gov constants for that year were defined",
                            scenarioYear
                    );
                    continue;
                }
                govConstantsToUse = allGovConstants.get(scenarioYear);
            }

            // Errors
            ValOrGerr<List<ValidationWarning>> validationResult = validateTaxScenarioAgainstGovConstants(scenario, govConstantsToUse);
            if (validationResult.hasGerr()) {
                log.error(validationResult.getGerr().toString());
                continue;
            }

            // Warnings
            List<ValidationWarning> validationWarnings = validationResult.getVal();
            if (validationWarnings.size() > 0) {
                for (ValidationWarning warning : validationWarnings) {
                    log.warn(warning.getMessage());
                }
            }

            renderTaxScenario(scenario, govConstantsToUse);
        }
    }


    private static ValOrGerr<List<ValidationWarning>> validateTaxScenarioAgainstGovConstants(TaxScenario scenario, GovConstantsForYear govConstantsForYear) {
        IncomeStreams grossIncomeStreams = scenario.getIncomeStreams();

        List<ValidationWarning> warnings = new ArrayList<>();

        RetirementConstants retirementConstants = govConstantsForYear.getRetirementConstants();
        long totalIraContrib = scenario.getIraContrib().getTrad() + scenario.getIraContrib().getRoth();
        if (totalIraContrib > retirementConstants.getIraContribLimit()) {
            return ValOrGerr.newGerr(
                    "The IRA contribution limit is {} but the scenario's total IRA contribution is {}",
                    retirementConstants.getIraContribLimit(),
                    totalIraContrib
            );
        }
        if (totalIraContrib < retirementConstants.getIraContribLimit()) {
            warnings.add(ValidationWarning.of(
                    "The IRA contribution limit {} but the scenario's total IRA contribution is only {}",
                    retirementConstants.getIraContribLimit(),
                    totalIraContrib
            ));
        }

        long trad401kContrib = scenario.get401kContrib().getTrad();
        long total401kContrib = trad401kContrib + scenario.get401kContrib().getRoth();
        if (total401kContrib > govConstantsForYear.getRetirementConstants().getPersonal401kContribLimit()) {
            return ValOrGerr.newGerr(
                    "The 401k contribution limit is {} but the scenario's total 401k contribution is {}",
                    retirementConstants.getPersonal401kContribLimit(),
                    total401kContrib
            );
        }
        if (total401kContrib < retirementConstants.getPersonal401kContribLimit()) {
            warnings.add(ValidationWarning.of(
                    "The IRA contribution limit {} but the scenario's total 401k contribution is only {}",
                    retirementConstants.getPersonal401kContribLimit(),
                    total401kContrib
            ));
        }

        // IRA contributions MUST be done with earned income, and trad 401k contributions can
        //  only be done via an employer (i.e. earned income) so total_ira_contrib + trad_401k_contrib must be
        // See: https://www.investopedia.com/retirement/ira-contribution-limits/
        if (grossIncomeStreams.getEarnedIncome() < totalIraContrib + trad401kContrib) {
            return ValOrGerr.newGerr(
                    "IRA contributions are limited to earned income and trad 401k contributions can only be done " +
                            "using earned income so total_ira_contrib + trad_401k_contrib must be < earned_income, but" +
                            "earned_income {} is < total_ira_contrib {} + trad_401k_contrib {}",
                    grossIncomeStreams.getEarnedIncome(),
                    totalIraContrib,
                    trad401kContrib
            );
        }

        return ValOrGerr.val(warnings);
    }

    private static void renderTaxScenario(
            TaxScenario scenario,
            GovConstantsForYear govConstants) {
        log.info("");
        logSectionHeader("RETIREMENT");
        logCurrencyItem("Trad 401k Contrib", scenario.get401kContrib().getTrad());
        logCurrencyItem("Roth 401k Contrib", scenario.get401kContrib().getRoth());
        logCurrencyItem("Trad IRA Contrib", scenario.getIraContrib().getTrad());
        logCurrencyItem("Roth IRA Contrib", scenario.getIraContrib().getRoth());

        IncomeStreams grossIncomeStreams = scenario.getIncomeStreams();

        log.info("");
        logSectionHeader("GROSS INCOME");
        logCurrencyItem("Earned Income", grossIncomeStreams.getEarnedIncome());
        logCurrencyItem("Non-Preferential Unearned Income", grossIncomeStreams.getNonPreferentialUnearnedIncome());
        logCurrencyItem("Preferential Earned Income", grossIncomeStreams.getPreferentialUnearnedIncome());
        log.info(SUM_LINE);
        long grossIncome = grossIncomeStreams.getTotal();
        logCurrencyItem("Gross Income", grossIncome);

        long totalAmtAdjustments = scenario.getAmtAdjustments().stream()
                .reduce(0L, (l, r) -> l + r);
        log.info("");
        logSectionHeader("ADJUSTMENTS");
        logCurrencyItem("AMT Adjustments", totalAmtAdjustments);

        ScenarioTaxes taxes = ScenarioTaxCalculator.calculateScenarioTax(scenario, govConstants);
        Map<Tax, Double> ficaTaxes = taxes.getFicaTaxes();
        Map<Tax, Double> primarySystemTaxes = taxes.getPrimarySystemIncomeTaxes();
        Map<Tax, Double> amtTaxes = taxes.getAmtTaxes();

        log.info("");
        logSectionHeader("FICA TAX");
        renderTaxesSection("FICA Tax", ficaTaxes, grossIncome);

        log.info("");
        logSectionHeader("REG FED INCOME TAX");
        renderTaxesSection("Reg Fed Income Tax", primarySystemTaxes, grossIncome);

        log.info("");
        logSectionHeader("AMT");
        renderTaxesSection("AMT", amtTaxes, grossIncome);

        Map<Tax, Double> totalTaxes = new HashMap<>();
        totalTaxes.putAll(ficaTaxes);
        String higherTaxSystem;
        String lowerTaxSystem;
        if (taxes.isPrimarySystemHigher()) {
            higherTaxSystem = "regular income tax";
            lowerTaxSystem = "AMT";
            totalTaxes.putAll(primarySystemTaxes);
        } else {
            higherTaxSystem = "AMT";
            lowerTaxSystem = "regular income tax";
            totalTaxes.putAll(amtTaxes);
        }

        log.info("");
        logSectionHeader("TOTAL TAX");
        log.info(
                "Year's {} tax system was higher than {}; using {} income tax",
                higherTaxSystem,
                lowerTaxSystem,
                higherTaxSystem
        );
        renderTaxesSection("Scenario Tax", totalTaxes, grossIncome);
    }

    private static void renderNetWorthCalculations(Map<String, Asset> assets, Projections projections) {
        log.info("");
        logBannerHeader("Historical Net Worth");
        HistNetWorthCalculator histNetWorthCalculator = new HistNetWorthCalculator(STALE_ASSET_THRESHOLD_DAYS);
        ValOrGerr<HistNetWorthCalcResults> histNetWorthCalcResultsOrErr = histNetWorthCalculator.calculateHistoricalNetWorth(assets);
        if (histNetWorthCalcResultsOrErr.hasGerr()) {
            log.error(histNetWorthCalcResultsOrErr.getGerr().toString());
            System.exit(FAILURE_EXIT_CODE);
        }
        HistNetWorthCalcResults histNetWorthCalcResults = histNetWorthCalcResultsOrErr.getVal();

        for (ValidationWarning warning : histNetWorthCalcResults.getValidationWarnings()) {
            log.warn(warning.getMessage());
        }
        for (Map.Entry<LocalDate, Long> entry : histNetWorthCalcResults.getHistoricalNetWorth().entrySet()) {
            logCurrencyItem(entry.getKey().toString(), entry.getValue());
        }

        ProjNetWorthCalculator projNetWorthCalculator = new ProjNetWorthCalculator(PROJECTION_DISPLAY_INCREMENT_YEARS);
        ProjNetWorthCalcResults projNetWorthCalcResults = projNetWorthCalculator.calculateNetWorthProjections(
                histNetWorthCalcResults.getLatestAssetValues(),
                projections
        );

        for (Map.Entry<String, ValOrGerr<SortedMap<LocalDate, Long>>> scenarioCalcEntry
                : projNetWorthCalcResults.getProjNetWorths().entrySet()) {
            String projScenarioId = scenarioCalcEntry.getKey();
            ValOrGerr<SortedMap<LocalDate, Long>> netWorthProjectionsOrErr = scenarioCalcEntry.getValue();
            ProjectionScenario projScenario = projections.getScenarios().get(projScenarioId);
            String projScenarioName = projScenario.getName();

            log.info("");
            logBannerHeader("Net Worth Projection: " + projScenarioName);

            if (netWorthProjectionsOrErr.hasGerr()) {
                log.error(netWorthProjectionsOrErr.getGerr().toString());
                continue;
            }
            Map<LocalDate, Long> netWorthProjections = netWorthProjectionsOrErr.getVal();
            netWorthProjections.forEach((date, netWorth) -> {
                logCurrencyItem(date.toString(), netWorth);
            });
        }
    }

    private static void logBannerHeader(String header) {
        log.info(BANNER_HEADER_LINE);
        int spacesToAdd = (BANNER_HEADER_LINE.length() - header.length()) / 2;
        log.info(Strings.repeat(" ", spacesToAdd) + header);
        log.info(BANNER_HEADER_LINE);
    }

    private static void logSectionHeader(String header) {
        header = header.toUpperCase();
        // We add 2 to account for the ": " that each item entry has
        int totalWidth = 2 * MINIMUM_ITEM_TITLE_WIDTH + 2;
        int spacesToAdd = (totalWidth - header.length()) / 2;
        log.info(
                "{}{}",
                Strings.repeat(" ", spacesToAdd),
                header
        );
    }

    private static void logCurrencyItem(String title, Object value) {
        log.info(
                "{}: {}",
                String.format("%1$" + MINIMUM_ITEM_TITLE_WIDTH + "s", title),
                String.format(
                        "%1$" + MINIMUM_CURRENCY_WIDTH + "s",
                        CURRENCY_FORMAT.format(value)
                )
        );
    }

    private static void renderTaxesSection(String titleCaseSumName, Map<Tax, Double> taxes, long grossIncome) {
        double totalTaxes = 0D;

        List<Tax> displayOrder = taxes.keySet().stream()
                .sorted(Comparator.comparing(Tax::getPrettyName))
                .collect(Collectors.toList());

        for (Tax taxType : displayOrder) {
            double taxAmount = taxes.get(taxType);
            totalTaxes += taxAmount;
            String prettyName = taxType.getPrettyName();
            logCurrencyItem(prettyName, taxAmount);
        }
        double effectiveTaxRate = totalTaxes / (double)grossIncome;
        log.info(SUM_LINE);
        String itemTitle = "Total " + titleCaseSumName;
        log.info(
                "{}: {} ({} effective tax rate)",
                String.format("%1$" + MINIMUM_ITEM_TITLE_WIDTH + "s", itemTitle),
                String.format(
                        "%1$" + MINIMUM_CURRENCY_WIDTH + "s",
                        CURRENCY_FORMAT.format(totalTaxes)
                ),
                PERCENT_FORMAT.format(effectiveTaxRate)
        );
    }
}
