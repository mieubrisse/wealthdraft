/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * User Manual available at https://docs.gradle.org/6.3/userguide/tutorial_java_projects.html
 */

plugins {
    // Apply the java plugin to add support for Java
    id 'java'

    id 'idea'

    // Apply the application plugin to add support for building a CLI application.
    id 'application'

    // Get latest Git tag so we can put it in the JAR name
    id 'com.palantir.git-version' version "${palantirGitVersionPlugin}"
}

version = gitVersion()

repositories {
    // Use Maven Central since JCenter was returning 502's on 2020-12-02
    mavenCentral()
}

dependencies {
    // This dependency is used by the application.
    implementation 'com.google.guava:guava:28.2-jre'

    compileOnly "org.immutables:value:${immutablesVersion}"
    annotationProcessor "org.immutables:value:${immutablesVersion}"

    implementation "net.sourceforge.argparse4j:argparse4j:${argParse4jVersion}"

    implementation "org.slf4j:slf4j-api:${slf4jVersion}"
    implementation "ch.qos.logback:logback-core:${logbackVersion}"
    implementation "ch.qos.logback:logback-classic:${logbackVersion}"

    implementation "com.fasterxml.jackson.core:jackson-annotations:${jacksonVersion}"
    implementation "com.fasterxml.jackson.core:jackson-databind:${jacksonVersion}"
    implementation "com.fasterxml.jackson.datatype:jackson-datatype-guava:${jacksonVersion}"
    implementation "com.fasterxml.jackson.datatype:jackson-datatype-jdk8:${jacksonVersion}"
    implementation "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:${jacksonVersion}"
    implementation "com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:${jacksonVersion}"

    // Use JUnit test framework
    testImplementation 'junit:junit:4.12'
}


application {
    // Define the main class for the application.
    mainClassName = "${mainClass}"
}

// println System.properties['java.home']

compileJava {
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11

    println(classpath)
    /*
    configurations.each {
        println(it)
        it.allArtifacts.forEach {
            println(it)
        }
    }
    */
}

// The 'jar' task will create a fat JAR, with all dependencies inside
jar {
    
    manifest {
        attributes(
            'Main-Class': "${mainClass}"
        )
    }
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
}

/*
sourceSets.each {
    println(it)
    it.allSource.each {
        println(it)
    }
}
*/

/*
// IDEA won't pick up our generated source directory, so we need to tell it where it is
def generatedSourceDirpath = 'build/generated'
sourceSets.main.java.srcDir(new File(generatedSourceDirpath))
idea {
    module {
        generatedSourceDirs += file(generatedSourceDirpath)
    }
}
*/
